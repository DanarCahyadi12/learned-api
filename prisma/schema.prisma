// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model users {
  id String @id @default(uuid())
  name String @db.MediumText
  email String @db.VarChar(255) @unique
  password String? @db.MediumText
  avatarURL String? @db.MediumText
  bio String? @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  refreshToken String? @db.MediumText
  tokenPassword String? @db.VarChar(255) @unique
  tokenPasswordExpires BigInt?
  classroom classroom[]
  classroomJoined classroom_participants[]
  quizResult quiz_results[]
  quizOnGoing quiz_on_going?
  studentyAssignments student_assignments[]

}

model classroom {
  id  String @id @default(uuid())
  code String @unique
  name String @db.VarChar(255)
  description String? @db.LongText
  bannerURL String?
  bannerPath String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userID String 
  users users @relation(fields: [userID], references: [id],onDelete: Cascade,onUpdate: Cascade)
  userJoined classroom_participants[]
  quiz quiz[]
  assignments assignments[]
  materials materials[]
}

model classroom_participants {
  id String @id @default(uuid())
  pin Boolean @default(false)
  userID String
  classroomID String 
  users users @relation(fields: [userID], references: [id],onDelete: Cascade,onUpdate: Cascade)
  classroom classroom @relation(fields: [classroomID], references: [id],onDelete: Cascade,onUpdate: Cascade)
  joinedAt DateTime @default(now())
  role String 
}

model quiz {
  id String @id @default(uuid())
  title String
  description String?
  openedAt DateTime @default(now())
  closedAt DateTime?
  isOpen Boolean @default(true)
  isClosed Boolean @default(false)
  passGrade Int?
  timeLimits String?
  randomQuestion Boolean @default(false)
  randomAnswer Boolean @default(false)
  totalQuestion Int
  allowSeeGrade Boolean @default(true)
  allowSeeResult Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  classroom classroom @relation(fields: [classroomID], references: [id],onDelete: Cascade, onUpdate: Cascade)
  classroomID String
  quizQuestions quiz_questions[]
  quizResult quiz_results[]
  quizOnGoing quiz_on_going[]
}


model quiz_questions {
  id String @id @default(uuid())
  number Int
  question String
  questionImageURL String?
  typeAnswer String
  answerA String
  answerB String
  answerC String
  correctAnswer String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  quizID String
  quiz quiz  @relation(fields: [quizID], references: [id], onDelete:  Cascade, onUpdate: Cascade)
  quizResults quiz_question_results[]
  quizOnGoing quiz_question_on_going[]

  

}

model quiz_results {
  id String @id @default(uuid())
  quiz quiz? @relation(fields: [quizID], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  users users @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quizID String? 
  userID String 
  grade Int
  gradingPass Boolean
  attemptedAt DateTime
  submitedAt DateTime
  workDuration String
  quizQuestion quiz_question_results[]

}
model quiz_question_results {
  id String @id @default(uuid())
  quizResults quiz_results @relation(fields: [quizResultID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quizQuestions quiz_questions? @relation(fields: [questionID], references: [id], onDelete: Cascade )
  quizResultID String 
  questionID String?
  userAnswer String?
  isCorrect Boolean
}

model quiz_on_going {
  id String @id @default(uuid())
  quiz quiz @relation(fields: [quizID], references: [id], onDelete: Cascade, onUpdate:  Cascade)
  users users @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate:  Cascade)
  quizID String 
  userID String @unique
  attemptedAt DateTime @default(now())
  quizQuestionOnGoing quiz_question_on_going[]
}


model quiz_question_on_going {
  @@id([quizOnGoingID, quizQuestionID])
  quizOnGoing quiz_on_going @relation(fields: [quizOnGoingID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quizQuestion quiz_questions @relation(fields: [quizQuestionID], references: [id],  onDelete: Cascade, onUpdate: Cascade)
  quizOnGoingID String 
  quizQuestionID String
  userAnswer String
}

model assignments {
  id String @id @default(uuid())
  title String
  description String? @db.MediumText
  openedAt DateTime @default(now())
  dueAt DateTime? 
  passGrade Int?
  extensions String?
  isOpen Boolean @default(true)
  allowSeeGrade Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  classroom classroom @relation(fields: [classroomID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classroomID String
  users student_assignments[]
  attachments assignment_attachments[]
}

model assignment_attachments {
  id String @id @default(uuid())
  path String
  attachmentURL String
  name String @db.VarChar(255)
  createdAt DateTime @default(now())
  assignments assignments @relation(fields: [assignmentID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignmentID String

}

model student_assignments {
  id String @id @default(uuid())
  assignments assignments @relation(fields: [assignmentID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users users @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignmentID String 
  userID String
  submitedAt DateTime @default(now())
  updatedAt DateTime @default(now())
  overdue Boolean
  assignmentGraded assignment_graded?
  studentAttachments student_assignment_attachments[]
}
model student_assignment_attachments {
  id String @id @default(uuid())
  type String 
  studentAssignments student_assignments @relation(fields: [studentAssignmentID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentAssignmentID String
  attachmentURL String @db.MediumText
  attachmentPath String? @db.MediumText
}



model assignment_graded {
  id String @id @default(uuid())
  userAssignment student_assignments @relation(fields: [userAssignmentID], references: [id],onDelete: Cascade, onUpdate: Cascade )
  userAssignmentID String @unique
  grade Int
  gradedAt DateTime @default(now())
  updatedAt DateTime @default(now())
}


model materials {
  id String @id @default(uuid())
  title String
  description String? @db.MediumText
  updatedAt DateTime @default(now())
  classroom classroom @relation(fields: [classroomID],references: [id], onDelete: Cascade, onUpdate: Cascade)
  classroomID String 
  materialFiles material_files[]
}

model material_files {
  id String @id @default(uuid())
  materials materials @relation(fields: [materialID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  materialID String
  materialURL String  
  filename String 
  path String
  createdAt DateTime @default(now())
}